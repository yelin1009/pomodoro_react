{"ast":null,"code":"var _jsxFileName = \"/Users/yelinlee/Documents/React/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/TimeLeft.js\";\nimport React, { useState } from \"react\";\n\nfunction TimeLeft({\n  focusLength\n}) {\n  const [timeRemaining, setTimeRemaining] = useState(focusLength);\n  const focusMinutes = Math.floor(focusLength / 60);\n  const focusSeconds = focusLength % 60;\n  let formattedFocusLength = focusMinutes.toString().padStart(2, \"0\") + \":\" + focusSeconds.toString().padStart(2, \"0\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 11\n    }\n  }, \"Focusing for \", formattedFocusLength, \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }\n  }, formattedFocusLength, \" remaining\"))));\n}\n\nexport default TimeLeft;","map":{"version":3,"sources":["/Users/yelinlee/Documents/React/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/TimeLeft.js"],"names":["React","useState","TimeLeft","focusLength","timeRemaining","setTimeRemaining","focusMinutes","Math","floor","focusSeconds","formattedFocusLength","toString","padStart"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAmC;AACjC,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAACE,WAAD,CAAlD;AAEA,QAAMG,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWL,WAAW,GAAG,EAAzB,CAArB;AACA,QAAMM,YAAY,GAAGN,WAAW,GAAG,EAAnC;AACA,MAAIO,oBAAoB,GACtBJ,YAAY,CAACK,QAAb,GAAwBC,QAAxB,CAAiC,CAAjC,EAAoC,GAApC,IACA,GADA,GAEAH,YAAY,CAACE,QAAb,GAAwBC,QAAxB,CAAiC,CAAjC,EAAoC,GAApC,CAHF;AAKA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACgBF,oBADhB,aAFF,eAME;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,oBADH,eANF,CADF,CAFF,CADF;AAiBD;;AAED,eAAeR,QAAf","sourcesContent":["import React, { useState } from \"react\";\n\nfunction TimeLeft({ focusLength }) {\n  const [timeRemaining, setTimeRemaining] = useState(focusLength);\n\n  const focusMinutes = Math.floor(focusLength / 60);\n  const focusSeconds = focusLength % 60;\n  let formattedFocusLength =\n    focusMinutes.toString().padStart(2, \"0\") +\n    \":\" +\n    focusSeconds.toString().padStart(2, \"0\");\n\n  return (\n    <div>\n      {/* TODO: This area should show only when a focus or break session is running or pauses */}\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n          <h2 data-testid=\"session-title\">\n            Focusing for {formattedFocusLength} minutes\n          </h2>\n          {/* TODO: Update message below to include time remaining in the current session */}\n          <p className=\"lead\" data-testid=\"session-sub-title\">\n            {formattedFocusLength} remaining\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TimeLeft;\n"]},"metadata":{},"sourceType":"module"}